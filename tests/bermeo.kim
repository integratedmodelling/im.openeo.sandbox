worldview im;

@test(
    name = "bermeo",
    description  = "",
    // add to the list any concepts to be observed in the context below
    observations = (

      "peopleea.forest.birds.indicator-value-of-threatened-bird-species-richness-resolver"
      "peopleea.forest.biomass.indicator-value-of-above-ground-biomass-resolver"
      "peopleea.forest.ndvi.indicator-value-of-normalized-difference-vegetation-index-resolver"
      "peopleea.forest.productivity.indicator-value-of-primary-productivity-resolver"
      "peopleea.soil.carbon.indicator-value-of-top-soil-organic-carbon-mass-resolver"
      "peopleea.forest.connectivity.indicator-value-of-forest-connectivity-resolver"
      "im|im.openeo.sandbox/tests/bermeo.indicator-forest-condition-resolver"
//      "openeo.vegetation.leaf-area-index-resolver"
//      "im|im.openeo.sandbox/tests/bermeo.forest_lai"

    ),
    // add assertions to check the observations after execution
    assertions = ()
)
// change the concept to the one you want; use a URN optionally (in a separate test project including the resource)
observe /* a:urn:to:use#objectid as */ earth:Region named bermeo
    // add any space and/or time extents: for example
    over space(shape="EPSG:4326 POLYGON ((-2.738103598164683 43.41970540114042, -2.776938194065562 43.41970540114042, -2.776938194065562 43.43259301757641, -2.738103598164683 43.43259301757641, -2.738103598164683 43.41970540114042))",
    		   grid="150 m"),
    	time(start=2015, end=2016, step=1.year);

model ecology:LeafAreaIndex where (any type of ecology:Forest) named forest_lai
//model ecology:LeafAreaIndex where (any landcover:Forest) named forest_lai
	observing
	ecology:LeafAreaIndex named lai,
//	landcover:LandCoverType named landcover_type,
	type of ecology:Forest named forest_type;

@documented(peopleea.forest_condition_accounts.index)
model  im:Indicator ecology:Forest es.nca:Condition
	observing 
		im:Indicator value of ecology:NormalizedDifferenceWaterIndex named indicator_normalized_difference_water_index,
		im:Indicator value of soil:TopSoil chemistry:Organic chemistry:Carbon im:Mass named indicator_soil_organic_carbon,
		im:Indicator value of conservation:Threatened biology:Bird ecology:SpeciesRichness named indicator_threathened_bird_species,
		im:Indicator value of ecology:AboveGroundBiomass named indicator_above_ground_biomass,
		im:Indicator value of ecology:PrimaryProductivity named indicator_net_primary_production, 
	    im:Indicator value of ecology:ForestConnectivity named indicator_forest_connectivity
	set to [
		def w_ndvi=(nodata(indicator_soil_organic_carbon) ? 0.28 : 0.27)
		def w_soc =(nodata(indicator_soil_organic_carbon) ? 0    : 0.07)
		def w_tbs =(nodata(indicator_soil_organic_carbon) ? 0.1  : 0.11)
		def w_agb =(nodata(indicator_soil_organic_carbon) ? 0.18 : 0.20)
		def w_npp =(nodata(indicator_soil_organic_carbon) ? 0.23 : 0.22)
		def w_fc  =(nodata(indicator_soil_organic_carbon) ? 0.16 : 0.18)
		return ((w_ndvi * indicator_normalized_difference_water_index) + (w_soc * indicator_soil_organic_carbon) 
		     + (w_tbs * indicator_threathened_bird_species) +  (w_agb * indicator_above_ground_biomass)
		      (w_npp * indicator_net_primary_production) + (w_fc * indicator_forest_connectivity))];

//This works only observing indicator_soil_organic_carbon and indicator_threathened_bird_species	
//		def w_soc =(nodata(indicator_soil_organic_carbon) ? 0  : 0.07)
//		def w_tbs =(nodata(indicator_soil_organic_carbon) ? 1  : 1)
//		return ((w_soc * indicator_soil_organic_carbon) + (w_tbs * indicator_threathened_bird_species))];

		
//		return ((0.27 * indicator_normalized_difference_water_index) + (w_soc * indicator_soil_organic_carbon) 
//		     + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
//		      (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity))];


		
//		def index= ((0.27 * indicator_normalized_difference_water_index) + (0.07 * indicator_soil_organic_carbon) 
//		     + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
//		      (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity))
//        def index_reduced=((0.28 * indicator_normalized_difference_water_index) + (0.11 * indicator_threathened_bird_species)
//        	+ (0.2 * indicator_above_ground_biomass) + (0.23 * indicator_net_primary_production)
//        	+ (0.18 * indicator_forest_connectivity))
//		 return (nodata(indicator_soil_organic_carbon) ? index : index_reduced)]; 

//	set to [
//		(0.27 * indicator_normalized_difference_water_index) + (0.07 * indicator_soil_organic_carbon) 
//		     + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
//		      (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity)]; 
////		     set to[(0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity)]; 

//        indicator_soil_organic_carbon = (nodata(indicator_soil_organic_carbon) ? 0 : indicator_soil_organic_carbon)

//	set to [
//		 return ((nodata(indicator_soil_organic_carbon) ? ((0.28 * indicator_normalized_difference_water_index) + (0.11 * indicator_threathened_bird_species)
//        	+ (0.2 * indicator_above_ground_biomass) + (0.23 * indicator_net_primary_production)
//        	+ (0.18 * indicator_forest_connectivity)) :
//		 	((0.27 * indicator_normalized_difference_water_index) + (0.07 * indicator_soil_organic_carbon) 
//		     + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
//		      (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity)))]; 

//    set to [
//        def forest_condition_index= (nodata(indicator_soil_organic_carbon) ?
//        	((0.28 * indicator_normalized_difference_water_index) + (0.11 * indicator_threathened_bird_species)
//        	+ (0.2 * indicator_above_ground_biomass) + (0.23 * indicator_net_primary_production)
//        	+ (0.18 * indicator_forest_connectivity)) :
//        	((0.27 * indicator_normalized_difference_water_index) + (0.07 * indicator_soil_organic_carbon) 
//		    + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
//		    (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity))
//		return forest_condition_index];		          
		     

model  im:Indicator ecology:Forest es.nca:Condition
	observing 
		im:Indicator value of ecology:NormalizedDifferenceWaterIndex named indicator_normalized_difference_water_index,
		im:Indicator value of soil:TopSoil chemistry:Organic chemistry:Carbon im:Mass named indicator_soil_organic_carbon,
		im:Indicator value of conservation:Threatened biology:Bird ecology:SpeciesRichness named indicator_threathened_bird_species,
		im:Indicator value of ecology:AboveGroundBiomass named indicator_above_ground_biomass,
		im:Indicator value of ecology:PrimaryProductivity named indicator_net_primary_production, 
	    im:Indicator value of ecology:ForestConnectivity named indicator_forest_connectivity
	set to [
		def index= ((0.27 * indicator_normalized_difference_water_index) + (0.07 * indicator_soil_organic_carbon) 
		     + (0.10 * indicator_threathened_bird_species) +  (0.18 * indicator_above_ground_biomass)
		      (0.22 * indicator_net_primary_production) + (0.16 * indicator_forest_connectivity))
        def index_reduced=((0.28 * indicator_normalized_difference_water_index) + (0.11 * indicator_threathened_bird_species)
        	+ (0.2 * indicator_above_ground_biomass) + (0.23 * indicator_net_primary_production)
        	+ (0.18 * indicator_forest_connectivity))
		 return (nodata(indicator_soil_organic_carbon) ? index : index_reduced)]; 

@intensive(space)
model im:Retained soil:Soil im:Mass caused by ecology:Vegetation in t/ha
	observing
		soil:RainfallRunoffErosivity in (MJ*mm)/(ha*h)    named r_factor,
		soil:SoilErodibility 						      named k_factor, 
		soil:SlopeSteepnessAndLength 				      named ls_factor,
		soil:CoverManagement 						      named c_factor,
		soil:CoverManagement caused by ecology:Vegetation named c_factor_unvegetated,
		soil:SupportPractice 						      named p_factor
	set to [ 
		def rusle = (r_factor * k_factor * ls_factor * c_factor * p_factor)
        def ruslv = (r_factor * k_factor * ls_factor * c_factor_unvegetated)
        return ((c_factor > c_factor_unvegetated) ? (ruslv - rusle) : unknown)];
//        return ((c_factor > c_factor_unvegetated) ? (ruslv - rusle) : 0)];        
//        return (nodata(c_factor) ? 0 : (ruslv - rusle))]; 
// add any models here
